{"version":3,"file":"ExtensionPanel-C0fZTn1F.js","sources":["../../src/components/dialog/content/setting/ExtensionPanel.vue"],"sourcesContent":["<template>\n  <div class=\"extension-panel\">\n    <DataTable :value=\"extensionStore.extensions\" stripedRows size=\"small\">\n      <Column field=\"name\" :header=\"$t('extensionName')\" sortable></Column>\n      <Column\n        :pt=\"{\n          bodyCell: 'flex items-center justify-end'\n        }\"\n      >\n        <template #body=\"slotProps\">\n          <ToggleSwitch\n            v-model=\"editingEnabledExtensions[slotProps.data.name]\"\n            @change=\"updateExtensionStatus\"\n          />\n        </template>\n      </Column>\n    </DataTable>\n    <div class=\"mt-4\">\n      <Message v-if=\"hasChanges\" severity=\"info\">\n        <ul>\n          <li v-for=\"ext in changedExtensions\" :key=\"ext.name\">\n            <span>\n              {{ extensionStore.isExtensionEnabled(ext.name) ? '[-]' : '[+]' }}\n            </span>\n            {{ ext.name }}\n          </li>\n        </ul>\n      </Message>\n      <Button\n        :label=\"$t('reloadToApplyChanges')\"\n        icon=\"pi pi-refresh\"\n        @click=\"applyChanges\"\n        :disabled=\"!hasChanges\"\n        text\n        fluid\n        severity=\"danger\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, onMounted } from 'vue'\nimport { useExtensionStore } from '@/stores/extensionStore'\nimport { useSettingStore } from '@/stores/settingStore'\nimport DataTable from 'primevue/datatable'\nimport Column from 'primevue/column'\nimport ToggleSwitch from 'primevue/toggleswitch'\nimport Button from 'primevue/button'\nimport Message from 'primevue/message'\n\nconst extensionStore = useExtensionStore()\nconst settingStore = useSettingStore()\n\nconst editingEnabledExtensions = ref<Record<string, boolean>>({})\n\nonMounted(() => {\n  extensionStore.extensions.forEach((ext) => {\n    editingEnabledExtensions.value[ext.name] =\n      extensionStore.isExtensionEnabled(ext.name)\n  })\n})\n\nconst changedExtensions = computed(() => {\n  return extensionStore.extensions.filter(\n    (ext) =>\n      editingEnabledExtensions.value[ext.name] !==\n      extensionStore.isExtensionEnabled(ext.name)\n  )\n})\n\nconst hasChanges = computed(() => {\n  return changedExtensions.value.length > 0\n})\n\nconst updateExtensionStatus = () => {\n  const editingDisabledExtensionNames = Object.entries(\n    editingEnabledExtensions.value\n  )\n    .filter(([_, enabled]) => !enabled)\n    .map(([name]) => name)\n\n  settingStore.set('Comfy.Extension.Disabled', [\n    ...extensionStore.inactiveDisabledExtensionNames,\n    ...editingDisabledExtensionNames\n  ])\n}\n\nconst applyChanges = () => {\n  // Refresh the page to apply changes\n  window.location.reload()\n}\n</script>\n"],"names":[],"mappings":"0tBAmDA,MAAM,eAAiB,oBACjB,aAAe,kBAEf,yBAA2B,IAA6B,CAAA,CAAE,EAEhE,UAAU,IAAM,CACC,eAAA,WAAW,QAAS,KAAQ,CACzC,yBAAyB,MAAM,IAAI,IAAI,EACrC,eAAe,mBAAmB,IAAI,IAAI,CAAA,CAC7C,CAAA,CACF,EAEK,MAAA,kBAAoB,SAAS,IAC1B,eAAe,WAAW,OAC9B,KACC,yBAAyB,MAAM,IAAI,IAAI,IACvC,eAAe,mBAAmB,IAAI,IAAI,CAAA,CAE/C,EAEK,WAAa,SAAS,IACnB,kBAAkB,MAAM,OAAS,CACzC,EAEK,sBAAwB,WAAM,CAClC,MAAM,8BAAgC,OAAO,QAC3C,yBAAyB,KAExB,EAAA,OAAO,CAAC,CAAC,EAAG,OAAO,IAAM,CAAC,OAAO,EACjC,IAAI,CAAC,CAAC,IAAI,IAAM,IAAI,EAEvB,aAAa,IAAI,2BAA4B,CAC3C,GAAG,eAAe,+BAClB,GAAG,6BAAA,CACJ,CAAA,EAV2B,yBAaxB,aAAe,WAAM,CAEzB,OAAO,SAAS,QAAO,EAFJ"}