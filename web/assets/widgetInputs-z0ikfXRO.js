var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,"name",{value,configurable:!0});import{c as LGraphNode,b as app,c3 as applyTextReplacements,c2 as ComfyWidgets,c8 as addValueControlWidgets,j as LiteGraph}from"./index-CZAow-Bz.js";const CONVERTED_TYPE="converted-widget",VALID_TYPES=["STRING","combo","number","toggle","BOOLEAN","text","string"],CONFIG=Symbol(),GET_CONFIG=Symbol(),TARGET=Symbol(),replacePropertyName="Run widget replace on values";class PrimitiveNode extends LGraphNode{static{__name(this,"PrimitiveNode")}controlValues;lastType;static category;constructor(title){super(title),this.addOutput("connect to widget input","*"),this.serialize_widgets=!0,this.isVirtualNode=!0,(!this.properties||!(replacePropertyName in this.properties))&&this.addProperty(replacePropertyName,!1,"boolean")}applyToGraph(extraLinks=[]){if(!this.outputs[0].links?.length)return;function get_links(node){let links2=[];for(const l of node.outputs[0].links){const linkInfo=app.graph.links[l],n=node.graph.getNodeById(linkInfo.target_id);n.type=="Reroute"?links2=links2.concat(get_links(n)):links2.push(l)}return links2}__name(get_links,"get_links");let links=[...get_links(this).map(l=>app.graph.links[l]),...extraLinks],v=this.widgets?.[0].value;v&&this.properties[replacePropertyName]&&(v=applyTextReplacements(app,v));for(const linkInfo of links){const node=this.graph.getNodeById(linkInfo.target_id),input=node.inputs[linkInfo.target_slot];let widget;if(input.widget[TARGET])widget=input.widget[TARGET];else{const widgetName=input.widget.name;widgetName&&(widget=node.widgets.find(w=>w.name===widgetName))}widget&&(widget.value=v,widget.callback&&widget.callback(widget.value,app.canvas,node,app.canvas.graph_mouse,{}))}}refreshComboInNode(){const widget=this.widgets?.[0];widget?.type==="combo"&&(widget.options.values=this.outputs[0].widget[GET_CONFIG]()[0],widget.options.values.includes(widget.value)||(widget.value=widget.options.values[0],widget.callback(widget.value)))}onAfterGraphConfigured(){if(this.outputs[0].links?.length&&!this.widgets?.length){if(!this.#onFirstConnection())return;if(this.widgets)for(let i=0;i<this.widgets_values.length;i++){const w=this.widgets[i];w&&(w.value=this.widgets_values[i])}this.#mergeWidgetConfig()}}onConnectionsChange(_,index,connected){if(app.configuringGraph)return;const links=this.outputs[0].links;connected?links?.length&&!this.widgets?.length&&this.#onFirstConnection():(this.#mergeWidgetConfig(),links?.length||this.onLastDisconnect())}onConnectOutput(slot,type,input,target_node,target_slot){if(!input.widget&&!(input.type in ComfyWidgets))return!1;if(this.outputs[slot].links?.length){const valid=this.#isValidConnection(input);return valid&&this.applyToGraph([{target_id:target_node.id,target_slot}]),valid}}#onFirstConnection(recreating){if(!this.outputs[0].links){this.onLastDisconnect();return}const linkId=this.outputs[0].links[0],link=this.graph.links[linkId];if(!link)return;const theirNode=this.graph.getNodeById(link.target_id);if(!theirNode||!theirNode.inputs)return;const input=theirNode.inputs[link.target_slot];if(!input)return;let widget;if(input.widget)widget=input.widget;else{if(!(input.type in ComfyWidgets))return;widget={name:input.name,[GET_CONFIG]:()=>[input.type,{}]}}const config=widget[GET_CONFIG]?.();if(!config)return;const{type}=getWidgetType(config);this.outputs[0].type=type,this.outputs[0].name=type,this.outputs[0].widget=widget,this.#createWidget(widget[CONFIG]??config,theirNode,widget.name,recreating,widget[TARGET])}#createWidget(inputData,node,widgetName,recreating,targetWidget){let type=inputData[0];type instanceof Array&&(type="COMBO");const[oldWidth,oldHeight]=this.size;let widget;if(type in ComfyWidgets?widget=(ComfyWidgets[type](this,"value",inputData,app)||{}).widget:widget=this.addWidget(type,"value",null,()=>{},{}),targetWidget)widget.value=targetWidget.value;else if(node?.widgets&&widget){const theirWidget=node.widgets.find(w=>w.name===widgetName);theirWidget&&(widget.value=theirWidget.value)}if(!inputData?.[1]?.control_after_generate&&(widget.type==="number"||widget.type==="combo")){let control_value=this.widgets_values?.[1];control_value||(control_value="fixed"),addValueControlWidgets(this,widget,control_value,void 0,inputData);let filter=this.widgets_values?.[2];filter&&this.widgets.length===3&&(this.widgets[2].value=filter)}const controlValues=this.controlValues;if(this.lastType===this.widgets[0].type&&controlValues?.length===this.widgets.length-1)for(let i=0;i<controlValues.length;i++)this.widgets[i+1].value=controlValues[i];const callback=widget.callback,self=this;if(widget.callback=function(){const r=callback?callback.apply(this,arguments):void 0;return self.applyToGraph(),r},this.size=[Math.max(this.size[0],oldWidth),Math.max(this.size[1],oldHeight)],!recreating){const sz=this.computeSize();this.size[0]<sz[0]&&(this.size[0]=sz[0]),this.size[1]<sz[1]&&(this.size[1]=sz[1]),requestAnimationFrame(()=>{this.onResize&&this.onResize(this.size)})}}recreateWidget(){const values=this.widgets?.map(w=>w.value);if(this.#removeWidgets(),this.#onFirstConnection(!0),values?.length)for(let i=0;i<this.widgets?.length;i++)this.widgets[i].value=values[i];return this.widgets?.[0]}#mergeWidgetConfig(){const output=this.outputs[0],links=output.links,hasConfig=!!output.widget[CONFIG];if(hasConfig&&delete output.widget[CONFIG],links?.length<2&&hasConfig){links.length&&this.recreateWidget();return}const config1=output.widget[GET_CONFIG]();if(config1[0]==="INT"||config1[0]==="FLOAT")for(const linkId of links){const link=app.graph.links[linkId];if(!link)continue;const theirInput=app.graph.getNodeById(link.target_id).inputs[link.target_slot];this.#isValidConnection(theirInput,hasConfig)}}isValidWidgetLink(originSlot,targetNode,targetWidget){const config2=getConfig.call(targetNode,targetWidget.name)??[targetWidget.type,targetWidget.options||{}];if(!isConvertibleWidget(targetWidget,config2))return!1;const output=this.outputs[originSlot];return output.widget?.[CONFIG]??output.widget?.[GET_CONFIG]()?!!mergeIfValid.call(this,output,config2):!0}#isValidConnection(input,forceUpdate){const output=this.outputs[0],config2=input.widget[GET_CONFIG]();return!!mergeIfValid.call(this,output,config2,forceUpdate,this.recreateWidget)}#removeWidgets(){if(this.widgets){for(const w of this.widgets)w.onRemove&&w.onRemove();this.controlValues=[],this.lastType=this.widgets[0]?.type;for(let i=1;i<this.widgets.length;i++)this.controlValues.push(this.widgets[i].value);setTimeout(()=>{delete this.lastType,delete this.controlValues},15),this.widgets.length=0}}onLastDisconnect(){this.outputs[0].type="*",this.outputs[0].name="connect to widget input",delete this.outputs[0].widget,this.#removeWidgets()}}function getWidgetConfig(slot){return slot.widget[CONFIG]??slot.widget[GET_CONFIG]?.()??["*",{}]}__name(getWidgetConfig,"getWidgetConfig");function getConfig(widgetName){const{nodeData}=this.constructor;return nodeData?.input?.required?.[widgetName]??nodeData?.input?.optional?.[widgetName]}__name(getConfig,"getConfig");function isConvertibleWidget(widget,config){return(VALID_TYPES.includes(widget.type)||VALID_TYPES.includes(config[0]))&&!widget.options?.forceInput}__name(isConvertibleWidget,"isConvertibleWidget");function hideWidget(node,widget,suffix=""){if(!widget.type?.startsWith(CONVERTED_TYPE)&&(widget.origType=widget.type,widget.origComputeSize=widget.computeSize,widget.origSerializeValue=widget.serializeValue,widget.computeSize=()=>[0,-4],widget.type=CONVERTED_TYPE+suffix,widget.serializeValue=()=>{if(!node.inputs)return;let node_input=node.inputs.find(i=>i.widget?.name===widget.name);if(!(!node_input||!node_input.link))return widget.origSerializeValue?widget.origSerializeValue():widget.value},widget.linkedWidgets))for(const w of widget.linkedWidgets)hideWidget(node,w,":"+widget.name)}__name(hideWidget,"hideWidget");function showWidget(widget){if(widget.type=widget.origType,widget.computeSize=widget.origComputeSize,widget.serializeValue=widget.origSerializeValue,delete widget.origType,delete widget.origComputeSize,delete widget.origSerializeValue,widget.linkedWidgets)for(const w of widget.linkedWidgets)showWidget(w)}__name(showWidget,"showWidget");function convertToInput(node,widget,config){hideWidget(node,widget);const{type}=getWidgetType(config),[oldWidth,oldHeight]=node.size,inputIsOptional=!!widget.options?.inputIsOptional,input=node.addInput(widget.name,type,{widget:{name:widget.name,[GET_CONFIG]:()=>config},...inputIsOptional?{shape:LiteGraph.SlotShape.HollowCircle}:{}});for(const widget2 of node.widgets)widget2.last_y+=LiteGraph.NODE_SLOT_HEIGHT;return node.setSize([Math.max(oldWidth,node.size[0]),Math.max(oldHeight,node.size[1])]),input}__name(convertToInput,"convertToInput");function convertToWidget(node,widget){showWidget(widget);const[oldWidth,oldHeight]=node.size;node.removeInput(node.inputs.findIndex(i=>i.widget?.name===widget.name));for(const widget2 of node.widgets)widget2.last_y-=LiteGraph.NODE_SLOT_HEIGHT;node.setSize([Math.max(oldWidth,node.size[0]),Math.max(oldHeight,node.size[1])])}__name(convertToWidget,"convertToWidget");function getWidgetType(config){let type=config[0];return type instanceof Array&&(type="COMBO"),{type}}__name(getWidgetType,"getWidgetType");function isValidCombo(combo,obj){return obj instanceof Array?combo.length!==obj.length||combo.find((v,i)=>obj[i]!==v)?(console.log("connection rejected: combo lists dont match"),!1):!0:(console.log(`connection rejected: tried to connect combo to ${obj}`),!1)}__name(isValidCombo,"isValidCombo");function isPrimitiveNode(node){return node.type==="PrimitiveNode"}__name(isPrimitiveNode,"isPrimitiveNode");function setWidgetConfig(slot,config,target){if(slot.widget&&(config?(slot.widget[GET_CONFIG]=()=>config,slot.widget[TARGET]=target):delete slot.widget,slot.link)){const link=app.graph.links[slot.link];if(link){const originNode=app.graph.getNodeById(link.origin_id);isPrimitiveNode(originNode)&&(config?originNode.recreateWidget():app.configuringGraph||(originNode.disconnectOutput(0),originNode.onLastDisconnect()))}}}__name(setWidgetConfig,"setWidgetConfig");function mergeIfValid(output,config2,forceUpdate,recreateWidget,config1){if(config1||(config1=getWidgetConfig(output)),config1[0]instanceof Array){if(!isValidCombo(config1[0],config2[0]))return}else if(config1[0]!==config2[0]){console.log("connection rejected: types dont match",config1[0],config2[0]);return}const keys=new Set([...Object.keys(config1[1]??{}),...Object.keys(config2[1]??{})]);let customConfig;const getCustomConfig=__name(()=>(customConfig||(typeof structuredClone>"u"?customConfig=JSON.parse(JSON.stringify(config1[1]??{})):customConfig=structuredClone(config1[1]??{})),customConfig),"getCustomConfig"),isNumber=config1[0]==="INT"||config1[0]==="FLOAT";for(const k of keys.values())if(k!=="default"&&k!=="forceInput"&&k!=="defaultInput"&&k!=="control_after_generate"&&k!=="multiline"&&k!=="tooltip"){let v1=config1[1][k],v2=config2[1]?.[k];if(v1===v2||!v1&&!v2)continue;if(isNumber){if(k==="min"){const theirMax=config2[1]?.max;if(theirMax!=null&&v1>theirMax){console.log("connection rejected: min > max",v1,theirMax);return}getCustomConfig()[k]=v1==null?v2:v2==null?v1:Math.max(v1,v2);continue}else if(k==="max"){const theirMin=config2[1]?.min;if(theirMin!=null&&v1<theirMin){console.log("connection rejected: max < min",v1,theirMin);return}getCustomConfig()[k]=v1==null?v2:v2==null?v1:Math.min(v1,v2);continue}else if(k==="step"){let step;if(v1==null)step=v2;else if(v2==null)step=v1;else{if(v1<v2){const a=v2;v2=v1,v1=a}if(v1%v2){console.log("connection rejected: steps not divisible","current:",v1,"new:",v2);return}step=v1}getCustomConfig()[k]=step;continue}}console.log(`connection rejected: config ${k} values dont match`,v1,v2);return}if(customConfig||forceUpdate){customConfig&&(output.widget[CONFIG]=[config1[0],customConfig]);const widget=recreateWidget?.call(this);if(widget){const min=widget.options.min,max=widget.options.max;min!=null&&widget.value<min&&(widget.value=min),max!=null&&widget.value>max&&(widget.value=max),widget.callback(widget.value)}}return{customConfig}}__name(mergeIfValid,"mergeIfValid");let useConversionSubmenusSetting;app.registerExtension({name:"Comfy.WidgetInputs",init(){useConversionSubmenusSetting=app.ui.settings.addSetting({id:"Comfy.NodeInputConversionSubmenus",name:"In the node context menu, place the entries that convert between input/widget in sub-menus.",type:"boolean",defaultValue:!0})},async beforeRegisterNodeDef(nodeType,nodeData,app2){const origGetExtraMenuOptions=nodeType.prototype.getExtraMenuOptions;nodeType.prototype.convertWidgetToInput=function(widget){const config=getConfig.call(this,widget.name)??[widget.type,widget.options||{}];return!isConvertibleWidget(widget,config)||widget.type?.startsWith(CONVERTED_TYPE)?!1:(convertToInput(this,widget,config),!0)},nodeType.prototype.getExtraMenuOptions=function(_,options){const r=origGetExtraMenuOptions?origGetExtraMenuOptions.apply(this,arguments):void 0;if(this.widgets){let toInput=[],toWidget=[];for(const w of this.widgets)if(!w.options?.forceInput)if(w.type===CONVERTED_TYPE)toWidget.push({content:`Convert ${w.name} to widget`,callback:__name(()=>convertToWidget(this,w),"callback")});else{const config=getConfig.call(this,w.name)??[w.type,w.options||{}];isConvertibleWidget(w,config)&&toInput.push({content:`Convert ${w.name} to input`,callback:__name(()=>convertToInput(this,w,config),"callback")})}toInput.length&&(useConversionSubmenusSetting.value?options.push({content:"Convert Widget to Input",submenu:{options:toInput}}):options.push(...toInput,null)),toWidget.length&&(useConversionSubmenusSetting.value?options.push({content:"Convert Input to Widget",submenu:{options:toWidget}}):options.push(...toWidget,null))}return r},nodeType.prototype.onGraphConfigured=function(){if(this.inputs){this.widgets??=[];for(const input of this.inputs)if(input.widget){if(input.widget[GET_CONFIG]||(input.widget[GET_CONFIG]=()=>getConfig.call(this,input.widget.name)),input.widget.config){if(input.widget.config[0]instanceof Array){input.type="COMBO";const link=app2.graph.links[input.link];link&&(link.type=input.type)}delete input.widget.config}const w=this.widgets.find(w2=>w2.name===input.widget.name);w?hideWidget(this,w):convertToWidget(this,input)}}};const origOnNodeCreated=nodeType.prototype.onNodeCreated;nodeType.prototype.onNodeCreated=function(){const r=origOnNodeCreated?origOnNodeCreated.apply(this):void 0;if(!app2.configuringGraph&&this.widgets){for(const w of this.widgets)if(w?.options?.forceInput||w?.options?.defaultInput){const config=getConfig.call(this,w.name)??[w.type,w.options||{}];convertToInput(this,w,config)}}return r};const origOnConfigure=nodeType.prototype.onConfigure;nodeType.prototype.onConfigure=function(){const r=origOnConfigure?origOnConfigure.apply(this,arguments):void 0;if(!app2.configuringGraph&&this.inputs){for(const input of this.inputs)if(input.widget&&!input.widget[GET_CONFIG]){input.widget[GET_CONFIG]=()=>getConfig.call(this,input.widget.name);const w=this.widgets.find(w2=>w2.name===input.widget.name);w&&hideWidget(this,w)}}return r};function isNodeAtPos(pos){for(const n of app2.graph.nodes)if(n.pos[0]===pos[0]&&n.pos[1]===pos[1])return!0;return!1}__name(isNodeAtPos,"isNodeAtPos");const origOnInputDblClick=nodeType.prototype.onInputDblClick,ignoreDblClick=Symbol();nodeType.prototype.onInputDblClick=function(slot){const r=origOnInputDblClick?origOnInputDblClick.apply(this,arguments):void 0,input=this.inputs[slot];if((!input.widget||!input[ignoreDblClick])&&!(input.type in ComfyWidgets)&&!(input.widget?.[GET_CONFIG]?.()?.[0]instanceof Array))return r;const node=LiteGraph.createNode("PrimitiveNode");app2.graph.add(node);const pos=[this.pos[0]-node.size[0]-30,this.pos[1]];for(;isNodeAtPos(pos);)pos[1]+=LiteGraph.NODE_TITLE_HEIGHT;return node.pos=pos,node.connect(0,this,slot),node.title=input.name,input[ignoreDblClick]=!0,setTimeout(()=>{delete input[ignoreDblClick]},300),r};const onConnectInput=nodeType.prototype.onConnectInput;nodeType.prototype.onConnectInput=function(targetSlot,type,output,originNode,originSlot){const v=onConnectInput?.(this,arguments);if(type!=="COMBO"||originNode.outputs[originSlot].widget)return v;const targetCombo=this.inputs[targetSlot].widget?.[GET_CONFIG]?.()?.[0];if(!targetCombo||!(targetCombo instanceof Array))return v;const originConfig=originNode.constructor?.nodeData?.output?.[originSlot];return!originConfig||!isValidCombo(targetCombo,originConfig)?!1:v}},registerCustomNodes(){LiteGraph.registerNodeType("PrimitiveNode",Object.assign(PrimitiveNode,{title:"Primitive"})),PrimitiveNode.category="utils"}});window.comfyAPI=window.comfyAPI||{};window.comfyAPI.widgetInputs=window.comfyAPI.widgetInputs||{};window.comfyAPI.widgetInputs.getWidgetConfig=getWidgetConfig;window.comfyAPI.widgetInputs.convertToInput=convertToInput;window.comfyAPI.widgetInputs.setWidgetConfig=setWidgetConfig;window.comfyAPI.widgetInputs.mergeIfValid=mergeIfValid;export{convertToInput,getWidgetConfig,mergeIfValid,setWidgetConfig};
//# sourceMappingURL=widgetInputs-z0ikfXRO.js.map
